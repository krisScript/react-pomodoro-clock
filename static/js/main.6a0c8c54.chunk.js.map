{"version":3,"sources":["components/LengthControls.js","getTime.js","components/Display.js","components/Controls.js","useInterval.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faPlus","faMinus","faPlay","faPause","LengthControls","_ref","incrementHandler","decrementHandler","displayType","labelId","length","lengthId","decrementId","incrementId","react_default","a","createElement","className","id","onClick","react_fontawesome_index_es","icon","getTime","seconds","minutes","Math","floor","remainderSeconds","concat","Display","switchTimer","sessionLength","breakLength","count","time","displayRef","useRef","_useState","useState","_useState2","Object","slicedToArray","displayTyprSync","setDisplayTypeSync","_useState3","_useState4","progressValue","setProgressValue","_useState5","_useState6","progressMax","setProgressMax","useLayoutEffect","current","innerText","index_esm","value","maxValue","styles","buildStyles","rotation","strokeLinecap","textSize","pathTransitionDuration","pathColor","textColor","trailColor","backgroundColor","ref","Controls","isPausedHandler","isPaused","resetHandler","useInterval","callback","delay","savedCallback","useEffect","intervalId","accurateInterval","aligned","immediate","clear","App","setSessionLength","setBreakLength","_useState7","_useState8","setDisplayType","_useState9","_useState10","audioRef","_useState11","_useState12","setCount","_useState13","_useState14","setDelay","_useState15","_useState16","isRunning","switchCount","play","components_Display","components_Controls","pause","currentTime","components_LengthControls","preload","src","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPASAA,IAAQC,IAAIC,IAAQC,IAASC,IAAQC,KACrC,IAyBeC,EAzBQ,SAAAC,GASjB,IARJC,EAQID,EARJC,iBACAC,EAOIF,EAPJE,iBACAC,EAMIH,EANJG,YACAC,EAKIJ,EALJI,QACAC,EAIIL,EAJJK,OACAC,EAGIN,EAHJM,SACAC,EAEIP,EAFJO,YACAC,EACIR,EADJQ,YAEA,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,MAAIE,GAAIT,GAAUD,GAClBM,EAAAC,EAAAC,cAAA,MAAIE,GAAIP,GAAWD,GACnBI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACfH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASC,GAAIL,EAAaM,QAASb,GACnDQ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAiBC,KAAK,UAExBP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASC,GAAIN,EAAaO,QAASZ,GACnDO,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAiBC,KAAK,cCtBfC,EAPC,SAAAC,GACd,IAAMC,EAAUC,KAAKC,MAAMH,EAAU,IAC/BI,EAAmBJ,EAAU,GACnC,SAAAK,OAAUJ,EAAU,GAAK,IAAM,IAA/BI,OAAoCJ,EAApC,KAAAI,OACED,EAAmB,GAAK,IAAM,IADhCC,OAEGD,WCsDUE,EArDC,SAAAxB,GAOV,IANJkB,EAMIlB,EANJkB,QACAf,EAKIH,EALJG,YACAsB,EAIIzB,EAJJyB,YACAC,EAGI1B,EAHJ0B,cACAC,EAEI3B,EAFJ2B,YACAC,EACI5B,EADJ4B,MAEMC,EAAOZ,EAAQC,GACfY,EAAaC,iBAAO,MAFtBC,EAG0CC,mBAAS,IAHnDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGGK,EAHHH,EAAA,GAGoBI,EAHpBJ,EAAA,GAAAK,EAIsCN,mBAAS,GAJ/CO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAIGE,EAJHD,EAAA,GAIkBE,EAJlBF,EAAA,GAAAG,EAKkCV,mBAAS,GAL3CW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAKGE,EALHD,EAAA,GAKgBE,EALhBF,EAAA,GAoBJ,OAdAG,0BAAgB,WACdT,EAAmBnC,GACnBuC,EAAiBxB,GACG,UAAhBf,EACF2C,EAA6B,GAAdnB,GACU,YAAhBxB,GACT2C,EAA+B,GAAhBpB,GAEbI,EAAWkB,SACwB,UAAjClB,EAAWkB,QAAQC,WACrBX,EAAmB,YAGtB,CAACX,EAAaC,EAAOzB,EAAae,EAASQ,EAAeD,IAE3DhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CACEC,MAAOV,EACPW,SAAUP,EACVQ,OAAQC,YAAY,CAClBC,SAAU,IACVC,cAAe,OACfC,SAAU,OACVC,uBAAwB,GACxBC,UAAS,mBACTC,UAAW,OACXC,WAAY,UACZC,gBAAiB,aAGnBrD,EAAAC,EAAAC,cAAA,KAAGE,GAAG,eAAewB,GACrB5B,EAAAC,EAAAC,cAAA,MAAIE,GAAG,YAAYkD,IAAKjC,GACrBD,OC3CbpC,IAAQC,IAAIC,IAAQC,IAASC,IAAQC,KACrC,IAeekE,EAfE,SAAAhE,GAAiD,IAA9CiE,EAA8CjE,EAA9CiE,gBAAiBC,EAA6BlE,EAA7BkE,SAAUC,EAAmBnE,EAAnBmE,aAC7C,OACE1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASE,QAASmD,EAAiBpD,GAAG,cACrDqD,EAAW,OAAS,SAGvBzD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASE,QAAS,kBAAMqD,KAAgBtD,GAAG,SAA7D,6BCMOuD,EAtBK,SAACC,EAAUC,EAAM1C,GACnC,IAAM2C,EAAgBxC,mBAGtByC,oBAAU,WACRD,EAAcvB,QAAUqB,GACvB,CAACA,EAASzC,IAGbmB,0BAAgB,WAId,GAAc,OAAVuB,EAAgB,CAClB,IAAIG,EAAaC,IAJnB,WACEH,EAAcvB,WAG0BsB,EAAO,CAC7CK,SAAS,EACTC,WAAW,IAEb,OAAO,kBAAMH,EAAWI,WAEzB,CAACP,EAAM1C,WCsGGkD,MArHf,WAAe,IAAA9C,EAC6BC,mBAAS,IADtCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNN,EADMQ,EAAA,GACS6C,EADT7C,EAAA,GAAAK,EAEyBN,mBAAS,GAFlCO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENZ,EAFMa,EAAA,GAEOwC,EAFPxC,EAAA,GAAAG,EAGmBV,oBAAS,GAH5BW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGNuB,EAHMtB,EAAA,GAAAqC,GAAArC,EAAA,GAIyBX,mBAAS,YAJlCiD,EAAA/C,OAAAC,EAAA,EAAAD,CAAA8C,EAAA,GAIN9E,EAJM+E,EAAA,GAIOC,EAJPD,EAAA,GAAAE,EAKqBnD,oBAAS,GAL9BoD,EAAAlD,OAAAC,EAAA,EAAAD,CAAAiD,EAAA,GAMPE,GANOD,EAAA,GAAAA,EAAA,GAMItD,iBAAO,OANXwD,EAOatD,mBAAS,MAPtBuD,EAAArD,OAAAC,EAAA,EAAAD,CAAAoD,EAAA,GAON3D,EAPM4D,EAAA,GAOCC,EAPDD,EAAA,GAAAE,EAQazD,mBAAS,MARtB0D,EAAAxD,OAAAC,EAAA,EAAAD,CAAAuD,EAAA,GAQNpB,EARMqB,EAAA,GAQCC,EARDD,EAAA,GAAAE,EASqB5D,oBAAS,GAT9B6D,EAAA3D,OAAAC,EAAA,EAAAD,CAAA0D,EAAA,GASNE,EATMD,EAAA,GAAAA,EAAA,GAUb1B,EACE,WAGEqB,EAAS,SAAA7D,GAAK,OAAIA,EAAQ,IACZ,IAAVA,GACFoE,KAGJD,EAAYzB,EAAQ,KACpB1C,GAEF,IAAMoE,EAAc,WACdV,EAAStC,SACXsC,EAAStC,QAAQiD,OAEC,YAAhB9F,GACFgF,EAAe,SACfM,EAAS,SAAA7D,GAAK,OAAkB,GAAdD,MAElBwD,EAAe,WACfM,EAAS,SAAA7D,GAAK,OAAoB,GAAhBF,MAsCtB,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBACdH,EAAAC,EAAAC,cAACuF,EAAD,CACEtE,MAAOA,EACPF,cAAeA,EACfC,YAAaA,EACbT,QAASU,EACTzB,YAAaA,EACbsB,YAAauE,IAEfvF,EAAAC,EAAAC,cAACwF,EAAD,CACElC,gBAfa,WACnB2B,EAAS,SAAAtB,GAAK,OAAe,OAAVA,EAAiB,IAAO,QAerCJ,SAAUA,EACVC,aAjDa,WACfmB,EAAStC,UACXsC,EAAStC,QAAQoD,QACjBd,EAAStC,QAAQqD,YAAc,GAEjCT,EAAS,SAAAtB,GAAK,OAAI,OAClBS,EAAiB,IACjBC,EAAe,GACfS,EAAS,OA0CHvE,QAASU,IAEXnB,EAAAC,EAAAC,cAAC2F,EAAD,CACEnG,YAAa,UACbF,iBA5CuB,WACf,OAAVqE,GAAkB5C,EAAgB,KACpCqD,EAAiB,SAAArD,GAAa,OAAIA,EAAgB,IAClD+D,EAAS,SAAA7D,GAAK,OAA0B,IAArBF,EAAgB,OA0C/BxB,iBAvCwB,WAChB,OAAVoE,GAAkB5C,EAAgB,IACpCqD,EAAiB,SAAArD,GAAa,OAAIA,EAAgB,IAClD+D,EAAS,SAAA7D,GAAK,OAA0B,IAArBF,EAAgB,OAqC/BrB,OAAQqB,EACRtB,QAAS,gBACTE,SAAU,iBACVE,YAAa,oBACbD,YAAa,sBAEfE,EAAAC,EAAAC,cAAC2F,EAAD,CACEnG,YAAa,QACbF,iBA1CsB,WACd,OAAVqE,GAAkB3C,EAAc,IAClCqD,EAAe,SAAArD,GAAW,OAAIA,EAAc,KAyCxCzB,iBAtCsB,WACd,OAAVoE,GAAkB3C,EAAc,GAClCqD,EAAe,SAAArD,GAAW,OAAIA,EAAc,KAqCxCvB,QAAS,cACTC,OAAQsB,EACRrB,SAAU,eACVE,YAAa,kBACbD,YAAa,oBAEfE,EAAAC,EAAAC,cAAA,SACEE,GAAG,OACH0F,QAAQ,OACRC,IAAI,wBACJzC,IAAKuB,OCzGKmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtG,EAAAC,EAAAC,cAACqG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6a0c8c54.chunk.js","sourcesContent":["import React from 'react';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faPlus,\r\n  faMinus,\r\n  faPlay,\r\n  faPause\r\n} from '@fortawesome/free-solid-svg-icons';\r\nlibrary.add(faPlus, faMinus, faPlay, faPause);\r\nconst LengthControls = ({\r\n  incrementHandler,\r\n  decrementHandler,\r\n  displayType,\r\n  labelId,\r\n  length,\r\n  lengthId,\r\n  decrementId,\r\n  incrementId\r\n}) => {\r\n  return (\r\n    <div className=\"controls\">\r\n      <h1 id={labelId}>{displayType}</h1>\r\n      <h1 id={lengthId}>{length}</h1>\r\n      <div className=\"buttons-container\">\r\n      <button className=\"button\" id={incrementId} onClick={incrementHandler}>\r\n        <FontAwesomeIcon icon=\"plus\" />\r\n      </button>\r\n      <button className=\"button\" id={decrementId} onClick={decrementHandler}>\r\n        <FontAwesomeIcon icon=\"minus\" />\r\n      </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default LengthControls;\r\n","const getTime = seconds => {\r\n  const minutes = Math.floor(seconds / 60);\r\n  const remainderSeconds = seconds % 60;\r\n  return `${minutes < 10 ? '0' : ''}${minutes}:${\r\n    remainderSeconds < 10 ? '0' : ''\r\n  }${remainderSeconds}`;\r\n};\r\nexport default getTime;\r\n","import React, { useRef, useLayoutEffect, useState } from 'react';\r\nimport getTime from '../getTime';\r\nimport {\r\n  CircularProgressbarWithChildren,\r\n  buildStyles\r\n} from 'react-circular-progressbar';\r\nconst Display = ({\r\n  seconds,\r\n  displayType,\r\n  switchTimer,\r\n  sessionLength,\r\n  breakLength,\r\n  count\r\n}) => {\r\n  const time = getTime(seconds);\r\n  const displayRef = useRef(null);\r\n  const [displayTyprSync, setDisplayTypeSync] = useState('');\r\n  const [progressValue, setProgressValue] = useState(0);\r\n  const [progressMax, setProgressMax] = useState(0);\r\n  useLayoutEffect(() => {\r\n    setDisplayTypeSync(displayType);\r\n    setProgressValue(seconds);\r\n    if (displayType === 'Break') {\r\n      setProgressMax(breakLength * 60);\r\n    } else if (displayType === 'Session') {\r\n      setProgressMax(sessionLength * 60);\r\n    }\r\n    if (displayRef.current) {\r\n      if (displayRef.current.innerText === '25:00') {\r\n        setDisplayTypeSync('Session');\r\n      }\r\n    }\r\n  }, [breakLength, count, displayType, seconds, sessionLength, switchTimer]);\r\n  return (\r\n    <div className=\"display\">\r\n      <div className=\"progress-container\">\r\n        <CircularProgressbarWithChildren\r\n          value={progressValue}\r\n          maxValue={progressMax}\r\n          styles={buildStyles({\r\n            rotation: 0.25,\r\n            strokeLinecap: 'butt',\r\n            textSize: '16px',\r\n            pathTransitionDuration: 0.5,\r\n            pathColor: `rgb(245, 86, 75)`,\r\n            textColor: '#f88',\r\n            trailColor: '#d6d6d6',\r\n            backgroundColor: '#3e98c7'\r\n          })}\r\n        >\r\n          <p id=\"timer-label\">{displayTyprSync}</p>\r\n          <h1 id=\"time-left\" ref={displayRef}>\r\n            {time}\r\n          </h1>\r\n        </CircularProgressbarWithChildren>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Display;\r\n","import React, { useRef } from 'react';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faPlus,\r\n  faMinus,\r\n  faPlay,\r\n  faPause\r\n} from '@fortawesome/free-solid-svg-icons';\r\nlibrary.add(faPlus, faMinus, faPlay, faPause);\r\nconst Controls = ({ isPausedHandler, isPaused, resetHandler }) => {\r\n  return (\r\n    <div className=\"controls\">\r\n      <div className=\"buttons-container\">\r\n        <button className=\"button\" onClick={isPausedHandler} id=\"start_stop\">\r\n          {isPaused ? 'play' : 'pause'}\r\n          {/* <FontAwesomeIcon icon={isPaused ? 'play' : 'pause'} />; */}\r\n        </button>\r\n        <button className=\"button\" onClick={() => resetHandler()} id=\"reset\">\r\n          reset\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Controls;\r\n","import { useRef, useLayoutEffect, useEffect } from 'react';\r\nimport accurateInterval from 'accurate-interval';\r\nconst useInterval = (callback, delay,count) => {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest function.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback,count]);\r\n\r\n  // Set up the interval.\r\n  useLayoutEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let intervalId = accurateInterval(tick, delay, {\r\n        aligned: true,\r\n        immediate: true\r\n      });\r\n      return () => intervalId.clear();\r\n    }\r\n  }, [delay,count]);\r\n};\r\nexport default useInterval;\r\n","import React, { useState, useLayoutEffect, useEffect, useRef } from 'react';\nimport LengthControls from './components/LengthControls';\nimport Display from './components/Display';\nimport Controls from './components/Controls';\nimport useInterval from './useInterval';\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport './App.scss';\nfunction App() {\n  const [sessionLength, setSessionLength] = useState(25);\n  const [breakLength, setBreakLength] = useState(5);\n  const [isPaused, setIsPaused] = useState(true);\n  const [displayType, setDisplayType] = useState('Session');\n  const [audioPlay, setAudioPlay] = useState(false);\n  const audioRef = useRef(null);\n  const [count, setCount] = useState(1500);\n  const [delay, setDelay] = useState(null);\n  const [isRunning, setIsRunning] = useState(true);\n  useInterval(\n    () => {\n      if (isRunning) {\n      }\n      setCount(count => count - 1);\n      if (count === 0) {\n        switchCount();\n      }\n    },\n    isRunning ? delay : null,\n    count\n  );\n  const switchCount = () => {\n    if (audioRef.current) {\n      audioRef.current.play();\n    }\n    if (displayType === 'Session') {\n      setDisplayType('Break');\n      setCount(count => breakLength * 60);\n    } else {\n      setDisplayType('Session');\n      setCount(count => sessionLength * 60);\n    }\n  };\n  const resetHandler = () => {\n    if (audioRef.current) {\n      audioRef.current.pause();\n      audioRef.current.currentTime = 0;\n    }\n    setDelay(delay => null);\n    setSessionLength(25);\n    setBreakLength(5);\n    setCount(1500);\n  };\n  const incrementSessionHander = () => {\n    if (delay === null && sessionLength < 60) {\n      setSessionLength(sessionLength => sessionLength + 1);\n      setCount(count => (sessionLength + 1) * 60);\n    }\n  };\n  const decrementSessionHandler = () => {\n    if (delay === null && sessionLength > 1) {\n      setSessionLength(sessionLength => sessionLength - 1);\n      setCount(count => (sessionLength - 1) * 60);\n    }\n  };\n  const incrementBreakHandler = () => {\n    if (delay === null && breakLength < 60) {\n      setBreakLength(breakLength => breakLength + 1);\n    }\n  };\n  const decrementBreakHandler = () => {\n    if (delay === null && breakLength > 1) {\n      setBreakLength(breakLength => breakLength - 1);\n    }\n  };\n  const pauseHandler = () => {\n    setDelay(delay => (delay === null ? 1000 : null));\n  };\n  return (\n    <div className=\"App\">\n      <main className=\"main-container\">\n        <Display\n          count={count}\n          sessionLength={sessionLength}\n          breakLength={breakLength}\n          seconds={count}\n          displayType={displayType}\n          switchTimer={switchCount}\n        />\n        <Controls\n          isPausedHandler={pauseHandler}\n          isPaused={isPaused}\n          resetHandler={resetHandler}\n          seconds={count}\n        />\n        <LengthControls\n          displayType={'Session'}\n          incrementHandler={incrementSessionHander}\n          decrementHandler={decrementSessionHandler}\n          length={sessionLength}\n          labelId={'session-label'}\n          lengthId={'session-length'}\n          incrementId={'session-increment'}\n          decrementId={'session-decrement'}\n        />\n        <LengthControls\n          displayType={'Break'}\n          incrementHandler={incrementBreakHandler}\n          decrementHandler={decrementBreakHandler}\n          labelId={'break-label'}\n          length={breakLength}\n          lengthId={'break-length'}\n          incrementId={'break-increment'}\n          decrementId={'break-decrement'}\n        />\n        <audio\n          id=\"beep\"\n          preload=\"auto\"\n          src=\"https://goo.gl/65cBl1\"\n          ref={audioRef}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}